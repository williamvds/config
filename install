#!/usr/bin/env bash

C=~/.config
. "$C/profile"

makedirs=(
	"$HOME/.local"
	"$HOME/.cache"
)

homedot=(
	ackrc
	bash_profile
	bashrc
	editrc
	profile
	subversion
)

packages=(
	bash
	coreutils
	git
	htop
	neovim
	rsync
	task
	the_silver_searcher
	tmux
	tree
)

services=(
)

user_services=(
)

if [[ ! "$_IS_SERVER" = 1 ]]; then
	homedot+=(
		lldbinit
		Xresources
		haskeline
	)
	packages+=(
		mpv
		youtube-dl
	)
fi

if [[ $_OS_GNU_LINUX ]]; then
	packages+=(
		bash-completion
		nftables
	)

	services+=(
		sshd
	)

	if [[ ! "$_IS_SERVER" = 1 ]]; then
		packages+=(
			alacritty
			avahi
			bluez-utils
			dhcpcd
			grim
			jq
			libqalculate
			mako
			mpv
			netctl
			python-neovim
			samba
			slurp
			sway
			swayidle
			swaylock
			sxiv
			udiskie
			vim-dein
			waybar
			wofi
			wpa_supplicant
			zathura

			materia-gtk-theme
			papirus-icon-theme
			xcursor-breeze
		)

		services+=(
			avahi-daemon
			winbind
			smb
		)
	fi
fi

if [[ $_OS_MACOS ]]; then
	packages+=(
		bash-completion@2
		findutils
		gnu-sed
		rename
		watch
	)

	if [[ ! "$_IS_SERVER" = 1 ]]; then
		homedot+=(
			chunkwmrc
			skhdrc
		)
		packages+=(
			chunkwm
			skhd
		)
	fi

	if [[ $_IS_WORK ]]; then
		packages+=(
			ios-deploy
		)
	fi
fi

# execute

echo "Making directories ${makedirs[*]}"
for dir in "${makedirs[@]}"; do
	mkdir -p "$dir"
done

link() {
	[[ "$(readlink -f "$1")" == "$(readlink -f "$2")" ]] && return
	ln -ns "$1" "$2" --backup --suffix=".old"
}

linkHome() {
	echo "Linking to home directory: $*"
	for file in "$@"; do
		link "$C/$file" "$HOME/.$file"
	done
}

private() {
	echo "Installing private data: $*"
	for path in "$@"; do
		link "$C/private/$path" "$C/$path"
	done
}

if [[ "$_IS_PERSONAL" = 1 ]]; then
	homedot+=(
		ssh
	)

	packages+=(
		mpd
		ncmpcpp
		newsboat
		nextcloud-client
		offlineimap
		signal-desktop
	)

	user_services+=(
		mpd
		offlineimap
		pulseaudio
	)

	private \
		gpg \
		mutt/public \
		offlineimap \
		pass \
		ssh \
		task \
		transmission-daemon
fi

linkHome "${homedot[@]}"
link "../.config/bin" "$HOME/.local/bin"

if [[ $_OS_ARCH_LINUX ]]; then
	INSTALL='yay -Sy --needed'
	ENABLE_SERVICE='systemctl enable --now'
	ENABLE_USER_SERVICE='systemctl --user enable --now'

	if ! command -v yay &>/dev/null; then
		echo 'Installing yay (and git)'
		sudo pacman -Sy --needed git
		git clone https://aur.archlinux.org/yay-bin.git /tmp/yay
		(cd /tmp/yay && makepkg -si)
	fi

elif [[ $_OS_MACOS ]]; then
	INSTALL='brew install'

	link "$C"/UK.keylayout "$HOME/Library/Keyboard Layouts/UK.keylayout"

	git clone https://github.com/Shougo/dein.vim \
		"$DEIN_DIR"/repos/github.com/Shougo/dein.vim

	if ! command -v brew; then
		/usr/bin/ruby -e \
			"$(curl -fsSL \
				https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi

	brew ln bash
	brew tap \
		koekeishiya/homebrew-chunkwm \
		jlhonora/lsusb \
		osxfuse/osxfuse

	brew cask install \
		alacritty \
		homebrew/cask-fonts/font-noto-mono-for-powerline \
		homebrew/cask-versions/firefox-nightly \
		osxfuse

	brew services start chunkwm skhd

	brew install --HEAD usbmuxd
	brew install --HEAD libimobiledevice
	brew install --HEAD ifuse
	brew install --HEAD universal-ctags/universal-ctags/universal-ctags

	screenshots="$HOME/Pictures/screens"
	mkdir -p "$screenshots"

	default() {
		for arg in {1..$*..2}; do
			echo ${$@[$arg]}
			defaults write "$1" ${$@[$arg]} ${$@[$arg+1]}
		done
	}

	default com.apple.screencapture location "$screenshots"
fi

if [ -z "$INSTALL" ]; then
	>&2 echo "No installation command set for this operating system"
	>&2 echo "Unable to install: ${packages[*]}"
else
	echo "Installing: ${packages[*]}"
	eval "$INSTALL" "${packages[@]}"
fi

if [ "${#services}" -gt 0 ]; then
	if [ -z "$ENABLE_SERVICE" ]; then
		>&2 echo "No service start command for this operating system"
	else
		echo "Enabling services: ${services[*]}"
		eval "$ENABLE_SERVICE" "${services[@]}"
	fi
fi

if [ "${#user_services}" -gt 0 ]; then
	if [ -z "$ENABLE_USER_SERVICE" ]; then
		>&2 echo "No user service start command for this operating system"
	else
		echo "Enabling user services: ${user_services[*]}"
		eval "$ENABLE_USER_SERVICE" "${user_services[@]}"
	fi
fi
